package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PovBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "version":
			z.Version, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "hash":
			err = dc.ReadExtension(&z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "previous":
			err = dc.ReadExtension(&z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "merkleRoot":
			err = dc.ReadExtension(&z.MerkleRoot)
			if err != nil {
				err = msgp.WrapError(err, "MerkleRoot")
				return
			}
		case "nonce":
			z.Nonce, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "voteSignature":
			err = dc.ReadExtension(&z.VoteSignature)
			if err != nil {
				err = msgp.WrapError(err, "VoteSignature")
				return
			}
		case "height":
			z.Height, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "nextTarget":
			err = dc.ReadExtension(&z.NextTarget)
			if err != nil {
				err = msgp.WrapError(err, "NextTarget")
				return
			}
		case "coinbaseHash":
			err = dc.ReadExtension(&z.CoinbaseHash)
			if err != nil {
				err = msgp.WrapError(err, "CoinbaseHash")
				return
			}
		case "txCount":
			z.TxCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TxCount")
				return
			}
		case "signature":
			err = dc.ReadExtension(&z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		case "coinbase":
			err = z.Coinbase.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Coinbase")
				return
			}
		case "transactions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Transactions")
				return
			}
			if cap(z.Transactions) >= int(zb0002) {
				z.Transactions = (z.Transactions)[:zb0002]
			} else {
				z.Transactions = make([]PovTransaction, zb0002)
			}
			for za0001 := range z.Transactions {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Transactions", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Transactions", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "hash":
						err = dc.ReadExtension(&z.Transactions[za0001].Hash)
						if err != nil {
							err = msgp.WrapError(err, "Transactions", za0001, "Hash")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Transactions", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovBlock) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 14
	// write "version"
	err = en.Append(0x8e, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "hash"
	err = en.Append(0xa4, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "previous"
	err = en.Append(0xa8, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// write "merkleRoot"
	err = en.Append(0xaa, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.MerkleRoot)
	if err != nil {
		err = msgp.WrapError(err, "MerkleRoot")
		return
	}
	// write "nonce"
	err = en.Append(0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Nonce)
	if err != nil {
		err = msgp.WrapError(err, "Nonce")
		return
	}
	// write "voteSignature"
	err = en.Append(0xad, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.VoteSignature)
	if err != nil {
		err = msgp.WrapError(err, "VoteSignature")
		return
	}
	// write "height"
	err = en.Append(0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "nextTarget"
	err = en.Append(0xaa, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.NextTarget)
	if err != nil {
		err = msgp.WrapError(err, "NextTarget")
		return
	}
	// write "coinbaseHash"
	err = en.Append(0xac, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.CoinbaseHash)
	if err != nil {
		err = msgp.WrapError(err, "CoinbaseHash")
		return
	}
	// write "txCount"
	err = en.Append(0xa7, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.TxCount)
	if err != nil {
		err = msgp.WrapError(err, "TxCount")
		return
	}
	// write "signature"
	err = en.Append(0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	// write "coinbase"
	err = en.Append(0xa8, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = z.Coinbase.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Coinbase")
		return
	}
	// write "transactions"
	err = en.Append(0xac, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Transactions)))
	if err != nil {
		err = msgp.WrapError(err, "Transactions")
		return
	}
	for za0001 := range z.Transactions {
		// map header, size 1
		// write "hash"
		err = en.Append(0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
		if err != nil {
			return
		}
		err = en.WriteExtension(&z.Transactions[za0001].Hash)
		if err != nil {
			err = msgp.WrapError(err, "Transactions", za0001, "Hash")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovBlock) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 14
	// string "version"
	o = append(o, 0x8e, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt32(o, z.Version)
	// string "hash"
	o = append(o, 0xa4, 0x68, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// string "previous"
	o = append(o, 0xa8, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73)
	o, err = msgp.AppendExtension(o, &z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// string "merkleRoot"
	o = append(o, 0xaa, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	o, err = msgp.AppendExtension(o, &z.MerkleRoot)
	if err != nil {
		err = msgp.WrapError(err, "MerkleRoot")
		return
	}
	// string "nonce"
	o = append(o, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendInt64(o, z.Nonce)
	// string "voteSignature"
	o = append(o, 0xad, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.VoteSignature)
	if err != nil {
		err = msgp.WrapError(err, "VoteSignature")
		return
	}
	// string "height"
	o = append(o, 0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.Height)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendInt64(o, z.Timestamp)
	// string "nextTarget"
	o = append(o, 0xaa, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	o, err = msgp.AppendExtension(o, &z.NextTarget)
	if err != nil {
		err = msgp.WrapError(err, "NextTarget")
		return
	}
	// string "coinbaseHash"
	o = append(o, 0xac, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x48, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.CoinbaseHash)
	if err != nil {
		err = msgp.WrapError(err, "CoinbaseHash")
		return
	}
	// string "txCount"
	o = append(o, 0xa7, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.TxCount)
	// string "signature"
	o = append(o, 0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	// string "coinbase"
	o = append(o, 0xa8, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65)
	o, err = z.Coinbase.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Coinbase")
		return
	}
	// string "transactions"
	o = append(o, 0xac, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Transactions)))
	for za0001 := range z.Transactions {
		// map header, size 1
		// string "hash"
		o = append(o, 0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
		o, err = msgp.AppendExtension(o, &z.Transactions[za0001].Hash)
		if err != nil {
			err = msgp.WrapError(err, "Transactions", za0001, "Hash")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "version":
			z.Version, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "hash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "previous":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "merkleRoot":
			bts, err = msgp.ReadExtensionBytes(bts, &z.MerkleRoot)
			if err != nil {
				err = msgp.WrapError(err, "MerkleRoot")
				return
			}
		case "nonce":
			z.Nonce, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "voteSignature":
			bts, err = msgp.ReadExtensionBytes(bts, &z.VoteSignature)
			if err != nil {
				err = msgp.WrapError(err, "VoteSignature")
				return
			}
		case "height":
			z.Height, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "nextTarget":
			bts, err = msgp.ReadExtensionBytes(bts, &z.NextTarget)
			if err != nil {
				err = msgp.WrapError(err, "NextTarget")
				return
			}
		case "coinbaseHash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.CoinbaseHash)
			if err != nil {
				err = msgp.WrapError(err, "CoinbaseHash")
				return
			}
		case "txCount":
			z.TxCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxCount")
				return
			}
		case "signature":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		case "coinbase":
			bts, err = z.Coinbase.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Coinbase")
				return
			}
		case "transactions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Transactions")
				return
			}
			if cap(z.Transactions) >= int(zb0002) {
				z.Transactions = (z.Transactions)[:zb0002]
			} else {
				z.Transactions = make([]PovTransaction, zb0002)
			}
			for za0001 := range z.Transactions {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Transactions", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Transactions", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "hash":
						bts, err = msgp.ReadExtensionBytes(bts, &z.Transactions[za0001].Hash)
						if err != nil {
							err = msgp.WrapError(err, "Transactions", za0001, "Hash")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Transactions", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovBlock) Msgsize() (s int) {
	s = 1 + 8 + msgp.Int32Size + 5 + msgp.ExtensionPrefixSize + z.Hash.Len() + 9 + msgp.ExtensionPrefixSize + z.Previous.Len() + 11 + msgp.ExtensionPrefixSize + z.MerkleRoot.Len() + 6 + msgp.Int64Size + 14 + msgp.ExtensionPrefixSize + z.VoteSignature.Len() + 7 + msgp.Int64Size + 10 + msgp.Int64Size + 11 + msgp.ExtensionPrefixSize + z.NextTarget.Len() + 13 + msgp.ExtensionPrefixSize + z.CoinbaseHash.Len() + 8 + msgp.Int64Size + 10 + msgp.ExtensionPrefixSize + z.Signature.Len() + 9 + z.Coinbase.Msgsize() + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.Transactions {
		s += 1 + 5 + msgp.ExtensionPrefixSize + z.Transactions[za0001].Hash.Len()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovTransaction) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			err = dc.ReadExtension(&z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovTransaction) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "hash"
	err = en.Append(0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovTransaction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "hash"
	o = append(o, 0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovTransaction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovTransaction) Msgsize() (s int) {
	s = 1 + 5 + msgp.ExtensionPrefixSize + z.Hash.Len()
	return
}
